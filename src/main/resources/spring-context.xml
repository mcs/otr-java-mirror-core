<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

    <!-- import properties -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
                <value>classpath:otr.properties</value>
            </list>
        </property>
    </bean>

    <!-- database configuration -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="maxPoolSize" value="10"/>
        <property name="driverClass" value="${db.driver_class}"/>
        <property name="jdbcUrl" value="${db.url}"/>
        <property name="user" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <property name="initialPoolSize" value="5"/>
        <property name="idleConnectionTestPeriod" value="10800"/>
        <property name="maxIdleTime" value="21600"/>
    </bean>

    <!-- JPA configuration -->
<!--    <bean id="persistenceUnitManager" class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
           <property name="persistenceXmlLocations">
              <list>
                <value>classpath:/META-INF/persistence.xml</value>
              </list>
           </property>
           <property name="defaultDataSource" ref="dataSource"/>
     </bean>
-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceUnitName" value="otr-mirror"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${db.dialect}</prop>
                <prop key="hibernate.hbm2ddl.auto">${db.auto}</prop>
                <prop key="hibernate.show_sql">${db.show_sql}</prop>
                <prop key="hibernate.format_sql">${db.format_sql}</prop>
            </props>
        </property>
    </bean>

    <!-- Transaction Manager -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- Email -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}"/>
    </bean>

    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <props>
                <prop key="resource.loader">class</prop>
                <prop key="class.resource.loader.class">org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader</prop>
            </props>
        </property>
    </bean>

    <!-- Data Access Objects -->
    <bean id="dataAccessObject" class="otr.mirror.core.dao.GenericDAOImpl" abstract="true" scope="singleton">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <bean id="recordingDAO" class="otr.mirror.core.dao.RecordingDAOImpl" parent="dataAccessObject"/>

    <!-- Services -->
    <bean id="showRecordingsService" class="otr.mirror.core.service.ShowRecordingsServiceImpl">
        <property name="recordingDAO" ref="recordingDAO"/>
        <property name="storagePath" value="${mirror.path}"/>
    </bean>
</beans>